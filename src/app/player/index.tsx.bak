import React from 'react';
import { inject, observer } from 'mobx-react';
import { Fab, IconButton } from '@material-ui/core';
import { Slider } from '@material-ui/lab';
import { SkipNext, SkipPrevious, PlayArrow, Pause, VolumeUp, VolumeOff, SaveAlt, Repeat, RepeatOne, List, Shuffle } from '@material-ui/icons';
import { withStyles, createStyles } from '@material-ui/core';
import { WithStyles, Theme } from '@material-ui/core';
import PlaylistStore from '../../stores/PlaylistStore';

const styles = (theme: Theme) =>
    createStyles({
        wrapper: {
            width: '100%',
            backgroundColor: '#ccc',
        },
        player: {
            display: 'flex',
            alignItems: 'center',
            padding: '4px 16px',
        },
        audio: {
            width: '100%',
            height: '48px',
            backgroundColor: 'rgb(241,243,244)',
        },
        mainControl: {},
        info: {
            padding: '16px',
            flex: 1,
        },
        secondaryControl: {
            display: 'flex',
            alignItems: 'center',
        },
        volumeSlider: {
            width: '100px',
        },
        mainSliderTitle: {
            display: 'flex',
            justifyContent: 'space-between',
            marginBottom: '8px',
        },
        mainSliderWrapper: {
            flex: 1,
        },
    });

interface PlayerProps extends WithStyles<typeof styles> {
    playlistStore: PlaylistStore;
    onPlay(): void;
    onPause(): void;
    mode: 'single' | 'list' | 'order' | 'random';
    paused: boolean;
    muted: boolean;
    volume: number;
    changePaused(): void;
    changeMuted(): void;
    changeVolume(volume: number): void;
    changeMode(): void;
}

@observer
class Player extends React.Component<PlayerProps> {
    audio: HTMLAudioElement | null = null;

    componentDidMount() {
        this.audio!.oncanplay = function() {};
    }

    handlePlayOrPause = () => {};

    handleEnd = () => {
        this.props.playlistStore.playNext();
    };

    render() {
        const { classes, playlistStore } = this.props;
        const { src } = playlistStore;
        return (
            <div className={classes.wrapper}>
                <div>
                    <audio ref={audio => (this.audio = audio)} className={classes.audio} src={src} controls={true} onEnded={this.handleEnd} autoPlay={true}>
                        您的浏览器不支持 video 标签。
                    </audio>
                </div>
                <div className={classes.player}>
                    <div className={classes.mainControl}>
                        <IconButton>
                            <SkipPrevious fontSize="large" />
                        </IconButton>
                        {/* <IconButton>
                            <PlayArrow fontSize="small" />
                        </IconButton> */}
                        <IconButton>
                            <Pause fontSize="large" />
                        </IconButton>
                        <IconButton>
                            <SkipNext fontSize="large" />
                        </IconButton>
                    </div>
                    <div className={classes.info}>
                        <div className={classes.mainSliderTitle}>
                            <div>该死的温柔 - 马天宇</div>
                            <div>00:00 / 00:00</div>
                        </div>
                        <div className={classes.mainSliderWrapper}>
                            <Slider value={55} />
                        </div>
                    </div>
                    <div>
                        <IconButton>
                            <SaveAlt />
                        </IconButton>
                        <IconButton>
                            <Repeat />
                        </IconButton>
                        <IconButton>
                            <RepeatOne />
                        </IconButton>
                        <IconButton>
                            <List />
                        </IconButton>
                        <IconButton>
                            <Shuffle />
                        </IconButton>
                    </div>
                    <div className={classes.secondaryControl}>
                        <IconButton>
                            <VolumeUp />
                        </IconButton>
                        {/* <IconButton>
                            <VolumeOff />
                        </IconButton> */}
                        <div className={classes.volumeSlider}>
                            <Slider value={55} />
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default inject(({ playlistStore }) => ({ playlistStore, onPlay: () => {}, onPause: () => {} }))(withStyles(styles)(Player));
